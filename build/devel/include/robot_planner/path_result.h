// Generated by gencpp from file robot_planner/path_result.msg
// DO NOT EDIT!


#ifndef ROBOT_PLANNER_MESSAGE_PATH_RESULT_H
#define ROBOT_PLANNER_MESSAGE_PATH_RESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_planner/data_result.h>

namespace robot_planner
{
template <class ContainerAllocator>
struct path_result_
{
  typedef path_result_<ContainerAllocator> Type;

  path_result_()
    : result()  {
    }
  path_result_(const ContainerAllocator& _alloc)
    : result(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_planner::data_result_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_planner::data_result_<ContainerAllocator> >::other >  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::robot_planner::path_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_planner::path_result_<ContainerAllocator> const> ConstPtr;

}; // struct path_result_

typedef ::robot_planner::path_result_<std::allocator<void> > path_result;

typedef boost::shared_ptr< ::robot_planner::path_result > path_resultPtr;
typedef boost::shared_ptr< ::robot_planner::path_result const> path_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_planner::path_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_planner::path_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_planner::path_result_<ContainerAllocator1> & lhs, const ::robot_planner::path_result_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_planner::path_result_<ContainerAllocator1> & lhs, const ::robot_planner::path_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_planner::path_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_planner::path_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_planner::path_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_planner::path_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_planner::path_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_planner::path_result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_planner::path_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05c8d58b6be9147bdddc88d0fd92da98";
  }

  static const char* value(const ::robot_planner::path_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05c8d58b6be9147bULL;
  static const uint64_t static_value2 = 0xdddc88d0fd92da98ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_planner::path_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_planner/path_result";
  }

  static const char* value(const ::robot_planner::path_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_planner::path_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_result[] result\n"
"================================================================================\n"
"MSG: robot_planner/data_result\n"
"float32 cx\n"
"float32 cy\n"
"float32 cyaw\n"
"float32 ck \n"
;
  }

  static const char* value(const ::robot_planner::path_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_planner::path_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_planner::path_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_planner::path_result_<ContainerAllocator>& v)
  {
    s << indent << "result[]" << std::endl;
    for (size_t i = 0; i < v.result.size(); ++i)
    {
      s << indent << "  result[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_planner::data_result_<ContainerAllocator> >::stream(s, indent + "    ", v.result[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PLANNER_MESSAGE_PATH_RESULT_H
